---
// Simple text editor with auto-save functionality
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>Prompt Pad</title>
		<style>
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
				background-color: #fafafa;
				color: #333;
				line-height: 1.6;
			}

			.container {
				min-height: 100vh;
				display: flex;
				flex-direction: column;
				padding: 20px;
				max-width: 100%;
				padding-bottom: 80px; /* Space for toolbar */
			}

			.header {
				display: flex;
				justify-content: space-between;
				align-items: center;
				margin-bottom: 20px;
				padding-bottom: 15px;
				border-bottom: 1px solid #e5e5e5;
			}

			.title {
				font-size: 18px;
				font-weight: 600;
				color: #2c3e50;
			}

			.save-status {
				font-size: 14px;
				color: #7f8c8d;
				opacity: 0;
				transition: opacity 0.3s ease;
			}

			.save-status.visible {
				opacity: 1;
			}

			.save-status.saving {
				color: #f39c12;
			}

			.save-status.saved {
				color: #27ae60;
			}

			.textarea {
				width: 100%;
				max-width: 90ch;
				margin: 0 auto;
				min-height: 100px;
				padding: 20px;
				border: 1px solid #e1e8ed;
				border-radius: 8px;
				font-family: inherit;
				font-size: 16px;
				line-height: 1.6;
				resize: none;
				outline: none;
				background-color: #ffffff;
				color: #333;
				field-sizing: content;
				transition: border-color 0.2s ease, box-shadow 0.2s ease;
			}

			.textarea:focus {
				border-color: #3498db;
				box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
			}

			.textarea::placeholder {
				color: #bdc3c7;
			}

			.copy-button {
				background: #3498db;
				color: white;
				border: none;
				padding: 8px 16px;
				border-radius: 6px;
				font-size: 14px;
				font-weight: 500;
				cursor: pointer;
				transition: background-color 0.2s ease;
				font-family: inherit;
			}

			.copy-button:hover {
				background: #2980b9;
			}

			.copy-button:active {
				transform: translateY(1px);
			}

			.modal {
				border: none;
				border-radius: 12px;
				padding: 0;
				max-width: 400px;
				width: 90%;
				box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
				margin: auto;
			}

			.modal::backdrop {
				background: rgba(0, 0, 0, 0.5);
				backdrop-filter: blur(4px);
			}

			.modal-content {
				padding: 24px;
				text-align: center;
			}

			.modal-title {
				font-size: 18px;
				font-weight: 600;
				color: #27ae60;
				margin-bottom: 8px;
			}

			.modal-subtitle {
				font-size: 14px;
				color: #7f8c8d;
				margin-bottom: 20px;
			}

			.modal-buttons {
				display: flex;
				gap: 12px;
				justify-content: center;
				flex-wrap: wrap;
			}

			.service-button {
				background: #ffffff;
				color: #333;
				border: 2px solid #e1e8ed;
				padding: 10px 16px;
				border-radius: 8px;
				font-size: 14px;
				font-weight: 500;
				text-decoration: none;
				cursor: pointer;
				transition: all 0.2s ease;
				display: inline-block;
				font-family: inherit;
			}

			.service-button:hover {
				border-color: #3498db;
				color: #3498db;
				transform: translateY(-1px);
			}

			.close-button {
				background: #95a5a6;
				color: white;
				border: none;
				padding: 10px 20px;
				border-radius: 8px;
				font-size: 14px;
				font-weight: 500;
				cursor: pointer;
				margin-top: 16px;
				transition: background-color 0.2s ease;
				font-family: inherit;
			}

			.close-button:hover {
				background: #7f8c8d;
			}

			.welcome-text {
				text-align: left;
				margin-bottom: 20px;
			}

			.welcome-text p {
				margin-bottom: 16px;
			}

			.welcome-text p:last-child {
				margin-bottom: 0;
				text-align: center;
				font-style: italic;
				color: #7f8c8d;
				font-size: 14px;
			}

			.bolt-link {
				color: #3498db;
				text-decoration: none;
				font-weight: 500;
			}

			.bolt-link:hover {
				text-decoration: underline;
			}

			.toolbar {
				position: fixed;
				bottom: 0;
				left: 0;
				right: 0;
				display: flex;
				justify-content: flex-end;
				align-items: center;
				padding: 12px 20px;
				background-color: #fcfcfc;
				border-top: 2px solid #e5e5e5;
				gap: 16px;
			}

			.menu-button {
				background: none;
				border: 1px solid #e1e8ed;
				color: #333;
				padding: 6px 12px;
				border-radius: 6px;
				font-size: 14px;
				font-weight: 500;
				cursor: pointer;
				transition: all 0.2s ease;
				margin-left: auto;
			}

			.menu-button:hover {
				border-color: #3498db;
				color: #3498db;
			}

			.prompt-list {
				margin-bottom: 20px;
				max-height: 300px;
				overflow-y: auto;
				border: 1px solid #e1e8ed;
				border-radius: 8px;
				padding: 8px;
			}

			.prompt-item {
				display: flex;
				align-items: center;
				justify-content: space-between;
				padding: 12px;
				border-radius: 6px;
				cursor: pointer;
				margin-bottom: 8px;
				background-color: #f9f9f9;
				border: 1px solid #eee;
				text-align: left;
				font-size: 14px;
				white-space: nowrap;
				overflow: hidden;
				text-overflow: ellipsis;
			}

			.prompt-item:last-child {
				margin-bottom: 0;
			}

			.prompt-item:hover {
				background-color: #eef;
				border-color: #3498db;
			}

			.prompt-item.active {
				background-color: #e0eaf3;
				border-color: #3498db;
				font-weight: 600;
			}

			@media (max-width: 768px) {
				.container {
					padding: 15px;
				}

				.textarea {
					padding: 15px;
					font-size: 16px;
					max-width: 100%;
				}

				.title {
					font-size: 16px;
				}

				.save-status {
					font-size: 12px;
				}

				.modal-buttons {
					flex-direction: column;
				}

				.service-button {
					width: 100%;
				}
			}

			@media (max-width: 480px) {
				.container {
					padding: 10px;
				}

				.header {
					flex-direction: column;
					align-items: flex-start;
					gap: 10px;
				}

				.textarea {
					padding: 12px;
				}
			}

			@media (prefers-color-scheme: dark) {
				body {
					background-color: #121212;
					color: #e0e0e0;
				}

				.header {
					border-bottom-color: #333;
				}

				.title {
					color: #e0e0e0;
				}

				.textarea {
					background-color: #1e1e1e;
					color: #e0e0e0;
					border-color: #444;
				}

				.textarea:focus {
					border-color: #5fa8e3;
					box-shadow: 0 0 0 3px rgba(95, 168, 227, 0.2);
				}

				.textarea::placeholder {
					color: #666;
				}

				.toolbar {
					background-color: #1e1e1e;
					border-top-color: #333;
				}

				.copy-button {
					background-color: #5fa8e3;
					color: #121212;
				}

				.copy-button:hover {
					background-color: #7bb9e8;
				}

				.modal {
					background-color: #2b2b2b;
					box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
				}

				.modal-content {
					color: #e0e0e0;
				}

				.modal-title {
					color: #73c991;
				}

				.modal-subtitle {
					color: #aaa;
				}

				.service-button {
					background-color: #333;
					color: #e0e0e0;
					border-color: #555;
				}

				.service-button:hover {
					border-color: #5fa8e3;
					color: #5fa8e3;
				}

				.close-button {
					background-color: #666;
				}

				.close-button:hover {
					background-color: #777;
				}

				.menu-button {
					border-color: #555;
					color: #e0e0e0;
				}

				.menu-button:hover {
					border-color: #5fa8e3;
					color: #5fa8e3;
				}

				.prompt-list {
					border-color: #444;
				}

				.prompt-item {
					background-color: #2b2b2b;
					border-color: #444;
				}

				.prompt-item:hover {
					background-color: #3a3a3a;
					border-color: #5fa8e3;
				}

				.prompt-item.active {
					background-color: #3a4a5a;
					border-color: #5fa8e3;
				}
			}
		</style>
	</head>
	<body>
		<div class="container">
			<div class="header">
				<h1 class="title">Prompt Pad</h1>
				<button id="promptMenuButton" class="menu-button">Prompts</button>
			</div>
			
			<textarea
				id="textEditor"
				class="textarea"
				placeholder="Start typing... Your text will be automatically saved."
				spellcheck="true"
			></textarea>
		</div>

		<div class="toolbar">
			<div id="saveStatus" class="save-status">Ready</div>
			<button id="copyButton" class="copy-button">Copy</button>
		</div>

		<dialog id="copyModal" class="modal">
			<div class="modal-content">
				<h2 class="modal-title">âœ“ Text Copied!</h2>
				<p class="modal-subtitle">Your text is now in your clipboard. Continue in:</p>
				<div class="modal-buttons">
					<a href="https://jules.google.com/task" target="_blank" class="service-button">Jules</a>
					<a href="https://bolt.new/" target="_blank" class="service-button">Bolt</a>
					<a href="https://gemini.google.com/" target="_blank" class="service-button">Gemini</a>
				</div>
				<button id="closeModal" class="close-button">Keep editing</button>
			</div>
		</dialog>

		<dialog id="welcomeModal" class="modal">
			<div class="modal-content">
				<h2 class="modal-title">Welcome to Prompt Pad</h2>
				<div class="welcome-text">
					<p>Prompt Pad is a tool for drafting prompts for coding AIs like Jules, Bolt, or Claude Code. It's just a simple text editor with autosave. Its purpose is to make it easier to work on a lengthier prompt without worrying about losing your progress if you get interrupted and switch away for a bit.</p>
				</div>
				<button id="closeWelcome" class="close-button">Start writing</button>
			</div>
		</dialog>

		<dialog id="promptMenuModal" class="modal">
			<div class="modal-content">
				<h2 class="modal-title">Prompts</h2>
				<div id="promptList" class="prompt-list">
					<!-- Prompt items will be dynamically inserted here -->
				</div>
				<div class="modal-buttons">
					<button id="newPromptButton" class="service-button">New Prompt</button>
					<button id="closePromptMenu" class="close-button">Close</button>
				</div>
			</div>
		</dialog>
		<script>
			import { effect, signal, computed } from '@preact/signals';
			import {
				allPrompts,
				selectedPrompt,
				selectedPromptId,
				updatePromptText,
				addNewPrompt,
				hasBeenWelcomed,
				markAsWelcomed,
				showModalFromSignal,
			} from '../signals';

			// DOM elements
			const textarea = document.getElementById('textEditor') as HTMLTextAreaElement | null;
			const saveStatusEl = document.getElementById('saveStatus') as HTMLElement | null;
			const copyButton = document.getElementById('copyButton') as HTMLButtonElement | null;
			const copyModal = document.getElementById('copyModal') as HTMLDialogElement | null;
			const welcomeModal = document.getElementById('welcomeModal') as HTMLDialogElement | null;
			const promptMenuModal = document.getElementById('promptMenuModal') as HTMLDialogElement | null;
			const closeModalButton = document.getElementById('closeModal') as HTMLButtonElement | null;
			const closeWelcomeButton = document.getElementById('closeWelcome') as HTMLButtonElement | null;
			const closePromptMenu = document.getElementById('closePromptMenu') as HTMLButtonElement | null;
			const promptMenuButton = document.getElementById('promptMenuButton') as HTMLButtonElement | null;
			const promptList = document.getElementById('promptList') as HTMLElement | null;
			const newPromptButton = document.getElementById('newPromptButton') as HTMLButtonElement | null;

			// State for auto-saving
			let saveTimeout: number | null = null;
			const saveDelay = 1000;
			const saveStatusSignal = signal('Ready');

			// --- Effects to sync state with DOM ---

			// Effect to update the text editor when the selected prompt changes
			effect(() => {
				const prompt = selectedPrompt.value;
				if (!textarea) return;
				const currentText = textarea.value;
				// Only update if the text is different to avoid losing cursor position
				if (prompt && prompt.text !== currentText) {
					textarea.value = prompt.text;
				} else if (!prompt) {
					textarea.value = '';
					textarea.placeholder = 'Create a new prompt to get started.';
				}
			});

			// Effect to render the list of prompts in the menu
			effect(() => {
				if (!promptList) return;
				const prompts = allPrompts.value;
				const currentId = selectedPromptId.value;
				promptList.innerHTML = ''; // Clear existing list

				if (prompts.length === 0) {
					promptList.innerHTML = '<p>No prompts yet. Create one!</p>';
					return;
				}

				prompts.forEach(prompt => {
					const item = document.createElement('div');
					item.className = 'prompt-item';
					if (prompt.id === currentId) {
						item.classList.add('active');
					}
					item.textContent = prompt.text.substring(0, 50) || 'Empty Prompt';
					item.addEventListener('click', () => {
						// The hash signal will update the URL
						selectedPromptId.value = prompt.id;
						promptMenuModal?.close();
					});
					promptList.appendChild(item);
				});
			});

			// Show welcome modal on first visit
			const showWelcomeModal = computed(() => !hasBeenWelcomed.value);
			showModalFromSignal(showWelcomeModal, welcomeModal);


			// Effect to update save status display
			effect(() => {
				if (!saveStatusEl) return;
				saveStatusEl.textContent = saveStatusSignal.value;
				saveStatusEl.className = 'save-status visible';
				switch (saveStatusSignal.value) {
					case 'Saving...':
						saveStatusEl.classList.add('saving');
						break;
					case 'Saved':
						saveStatusEl.classList.add('saved');
						break;
					case 'Error':
						saveStatusEl.classList.add('error');
						break;
				}
				// Hide the status after a delay if it's 'Ready' or 'Saved'
				if (saveStatusSignal.value === 'Ready' || saveStatusSignal.value === 'Saved') {
					setTimeout(() => {
						if (saveStatusSignal.peek() !== 'Saving...') {
							saveStatusEl.classList.remove('visible');
						}
					}, 2000);
				}
			});

			// --- Event Listeners ---

			// Auto-save on input
			if (textarea) {
				textarea.addEventListener('input', () => {
					if (saveTimeout) clearTimeout(saveTimeout);
					saveStatusSignal.value = 'Saving...';
					saveTimeout = window.setTimeout(() => {
						const id = selectedPromptId.peek();
						if (id && textarea) {
							updatePromptText(id, textarea.value);
							saveStatusSignal.value = 'Saved';
						}
					}, saveDelay);
				});
			}

			// UI Buttons
			if (promptMenuButton) {
				promptMenuButton.addEventListener('click', () => promptMenuModal?.showModal());
			}
			if (newPromptButton) {
				newPromptButton.addEventListener('click', () => {
					addNewPrompt();
					promptMenuModal?.close();
				});
			}

			if (copyButton) {
				copyButton.addEventListener('click', async () => {
					if (!textarea) return;
					try {
						const content = textarea.value;
						if (!content.trim()) return;
						await navigator.clipboard.writeText(content);
						copyModal?.showModal();
					} catch (error) {
						console.error('Failed to copy to clipboard:', error);
						if (textarea) {
							textarea.select(); // Fallback for older browsers
							document.execCommand('copy');
							copyModal?.showModal();
						}
					}
				});
			}

			// Modal close buttons
			if (closeModalButton) {
				closeModalButton.addEventListener('click', () => copyModal?.close());
			}
			if (closePromptMenu) {
				closePromptMenu.addEventListener('click', () => promptMenuModal?.close());
			}
			if (closeWelcomeButton) {
				closeWelcomeButton.addEventListener('click', () => {
					welcomeModal?.close();
					markAsWelcomed();
				});
			}

			// Close modals on backdrop click
			[copyModal, promptMenuModal, welcomeModal].forEach(modal => {
				if (modal) {
					modal.addEventListener('click', (e) => {
						if (e.target === modal) {
							modal.close();
							if (modal === welcomeModal) {
								markAsWelcomed();
							}
						}
					});
				}
			});

			// --- Mobile/UX Enhancements ---
			// Handle focus for better mobile experience
			if ('ontouchstart' in window && textarea) {
				textarea.addEventListener('focus', function () {
					setTimeout(() => {
						this.scrollIntoView({ behavior: 'smooth', block: 'center' });
					}, 300);
				});
			}

			// Visual Viewport API for sticky toolbar
			if ('visualViewport' in window) {
				const toolbar = document.querySelector('.toolbar') as HTMLElement | null;
				const container = document.querySelector('.container') as HTMLElement | null;

				const updateToolbarPosition = () => {
					const viewport = window.visualViewport;
					if (!viewport || !toolbar || !container || !textarea) return;
					const keyboardHeight = window.innerHeight - viewport.height - viewport.offsetTop;
					toolbar.style.bottom = `${keyboardHeight}px`;
					container.style.paddingBottom = `calc(80px + ${keyboardHeight}px)`;
					textarea.style.scrollPaddingBottom = `calc(80px + ${keyboardHeight}px)`;
				};

				window.visualViewport?.addEventListener('resize', updateToolbarPosition);
				window.visualViewport?.addEventListener('scroll', updateToolbarPosition);
				updateToolbarPosition(); // Initial call
			}
		</script>
	</body>
</html>