---
// Simple text editor with auto-save functionality
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>Prompt Pad</title>
		<style>
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
				background-color: #fafafa;
				color: #333;
				line-height: 1.6;
			}

			.container {
				min-height: 100vh;
				display: flex;
				flex-direction: column;
				padding: 20px;
				max-width: 100%;
			}

			.header {
				display: flex;
				justify-content: space-between;
				align-items: center;
				margin-bottom: 20px;
				padding-bottom: 15px;
				border-bottom: 1px solid #e5e5e5;
			}

			.title {
				font-size: 18px;
				font-weight: 600;
				color: #2c3e50;
			}

			.save-status {
				font-size: 14px;
				color: #7f8c8d;
				opacity: 0;
				transition: opacity 0.3s ease;
			}

			.save-status.visible {
				opacity: 1;
			}

			.save-status.saving {
				color: #f39c12;
			}

			.save-status.saved {
				color: #27ae60;
			}

			.editor-container {
				flex: 1;
				display: flex;
				flex-direction: column;
			}

			.textarea {
				flex: 1;
				width: 100%;
				max-width: 90ch;
				margin: 0 auto;
				min-height: 500px;
				padding: 20px;
				border: 1px solid #e1e8ed;
				border-radius: 8px;
				font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
				font-size: 16px;
				line-height: 1.6;
				resize: none;
				outline: none;
				background-color: #ffffff;
				color: #333;
				field-sizing: content;
				transition: border-color 0.2s ease, box-shadow 0.2s ease;
			}

			.textarea:focus {
				border-color: #3498db;
				box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
			}

			.textarea::placeholder {
				color: #bdc3c7;
			}

			.copy-button {
				background: #3498db;
				color: white;
				border: none;
				padding: 8px 16px;
				border-radius: 6px;
				font-size: 14px;
				font-weight: 500;
				cursor: pointer;
				transition: background-color 0.2s ease;
				font-family: inherit;
			}

			.copy-button:hover {
				background: #2980b9;
			}

			.copy-button:active {
				transform: translateY(1px);
			}

			.modal {
				border: none;
				border-radius: 12px;
				padding: 0;
				max-width: 400px;
				width: 90%;
				box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
				margin: auto;
			}

			.modal::backdrop {
				background: rgba(0, 0, 0, 0.5);
				backdrop-filter: blur(4px);
			}

			.modal-content {
				padding: 24px;
				text-align: center;
			}

			.modal-title {
				font-size: 18px;
				font-weight: 600;
				color: #27ae60;
				margin-bottom: 8px;
			}

			.modal-subtitle {
				font-size: 14px;
				color: #7f8c8d;
				margin-bottom: 20px;
			}

			.modal-buttons {
				display: flex;
				gap: 12px;
				justify-content: center;
				flex-wrap: wrap;
			}

			.service-button {
				background: #ffffff;
				color: #333;
				border: 2px solid #e1e8ed;
				padding: 10px 16px;
				border-radius: 8px;
				font-size: 14px;
				font-weight: 500;
				text-decoration: none;
				cursor: pointer;
				transition: all 0.2s ease;
				display: inline-block;
				font-family: inherit;
			}

			.service-button:hover {
				border-color: #3498db;
				color: #3498db;
				transform: translateY(-1px);
			}

			.close-button {
				background: #95a5a6;
				color: white;
				border: none;
				padding: 10px 20px;
				border-radius: 8px;
				font-size: 14px;
				font-weight: 500;
				cursor: pointer;
				margin-top: 16px;
				transition: background-color 0.2s ease;
				font-family: inherit;
			}

			.close-button:hover {
				background: #7f8c8d;
			}

			.welcome-text {
				text-align: left;
				margin-bottom: 20px;
			}

			.welcome-text p {
				margin-bottom: 16px;
			}

			.welcome-text p:last-child {
				margin-bottom: 0;
				text-align: center;
				font-style: italic;
				color: #7f8c8d;
				font-size: 14px;
			}

			.bolt-link {
				color: #3498db;
				text-decoration: none;
				font-weight: 500;
			}

			.bolt-link:hover {
				text-decoration: underline;
			}

			@media (max-width: 768px) {
				.container {
					padding: 15px;
				}

				.textarea {
					padding: 15px;
					font-size: 16px;
					min-height: 400px;
					max-width: 100%;
				}

				.title {
					font-size: 16px;
				}

				.save-status {
					font-size: 12px;
				}

				.modal-buttons {
					flex-direction: column;
				}

				.service-button {
					width: 100%;
				}
			}

			@media (max-width: 480px) {
				.container {
					padding: 10px;
				}

				.header {
					flex-direction: column;
					align-items: flex-start;
					gap: 10px;
				}

				.textarea {
					padding: 12px;
				}
			}
		</style>
	</head>
	<body>
		<div class="container">
			<div class="header">
				<h1 class="title">Prompt Pad</h1>
				<div style="display: flex; align-items: center; gap: 12px;">
					<button id="copyButton" class="copy-button">Copy</button>
					<div id="saveStatus" class="save-status">Ready</div>
				</div>
			</div>
			
			<div class="editor-container">
				<textarea 
					id="textEditor" 
					class="textarea" 
					placeholder="Start typing... Your text will be automatically saved."
					spellcheck="true"
				></textarea>
			</div>
		</div>

		<dialog id="copyModal" class="modal">
			<div class="modal-content">
				<h2 class="modal-title">âœ“ Text Copied!</h2>
				<p class="modal-subtitle">Your text is now in your clipboard. Continue in:</p>
				<div class="modal-buttons">
					<a href="https://jules.google.com/task" target="_blank" class="service-button">Jules</a>
					<a href="https://bolt.new/" target="_blank" class="service-button">Bolt</a>
					<a href="https://gemini.google.com/" target="_blank" class="service-button">Gemini</a>
				</div>
				<button id="closeModal" class="close-button">Keep editing</button>
			</div>
		</dialog>

		<dialog id="welcomeModal" class="modal">
			<div class="modal-content">
				<h2 class="modal-title">Welcome to Prompt Pad</h2>
				<div class="welcome-text">
					<p>Prompt Pad is a tool for drafting prompts for coding AIs like Jules, Bolt, or Claude Code. It's just a simple text editor with autosave. Its purpose is to make it easier to work on a lengthier prompt without worrying about losing your progress if you get interrupted and switch away for a bit.</p>
				</div>
				<button id="closeWelcome" class="close-button">Start writing</button>
			</div>
		</dialog>
		<script>
			class AutoSaveEditor {
				constructor() {
					this.textarea = document.getElementById('textEditor');
					this.saveStatus = document.getElementById('saveStatus');
					this.copyButton = document.getElementById('copyButton');
					this.copyModal = document.getElementById('copyModal');
					this.closeModalButton = document.getElementById('closeModal');
					this.welcomeModal = document.getElementById('welcomeModal');
					this.closeWelcomeButton = document.getElementById('closeWelcome');
					this.storageKey = 'text-editor-content';
					this.welcomeKey = 'prompt-pad-welcomed';
					this.saveTimeout = null;
					this.saveDelay = 1000; // 1 second delay

					this.init();
				}

				init() {
					// Load saved content
					this.loadContent();
					
					// Show welcome modal for first-time visitors
					this.checkFirstVisit();
					
					// Set up auto-save
					this.textarea.addEventListener('input', () => {
						this.handleInput();
					});

					// Save on page unload as backup
					window.addEventListener('beforeunload', () => {
						this.saveContent();
					});

					// Set up copy functionality
					this.copyButton.addEventListener('click', () => {
						this.copyToClipboard();
					});

					// Set up modal close
					this.closeModalButton.addEventListener('click', () => {
						this.copyModal.close();
					});

					// Set up welcome modal close
					this.closeWelcomeButton.addEventListener('click', () => {
						this.welcomeModal.close();
						this.markAsWelcomed();
					});

					// Close modal when clicking backdrop
					this.copyModal.addEventListener('click', (e) => {
						if (e.target === this.copyModal) {
							this.copyModal.close();
						}
					});

					// Close welcome modal when clicking backdrop
					this.welcomeModal.addEventListener('click', (e) => {
						if (e.target === this.welcomeModal) {
							this.welcomeModal.close();
							this.markAsWelcomed();
						}
					});

					// Show ready status
					this.showStatus('Ready', '');
				}

				loadContent() {
					try {
						const savedContent = localStorage.getItem(this.storageKey);
						if (savedContent) {
							this.textarea.value = savedContent;
							this.showStatus('Loaded', 'saved');
							setTimeout(() => {
								this.showStatus('Ready', '');
							}, 2000);
						}
					} catch (error) {
						console.warn('Failed to load saved content:', error);
					}
				}

				checkFirstVisit() {
					try {
						const hasBeenWelcomed = localStorage.getItem(this.welcomeKey);
						if (!hasBeenWelcomed) {
							// Small delay to ensure page is fully loaded
							setTimeout(() => {
								this.welcomeModal.showModal();
							}, 500);
						}
					} catch (error) {
						console.warn('Failed to check first visit status:', error);
					}
				}

				markAsWelcomed() {
					try {
						localStorage.setItem(this.welcomeKey, 'true');
					} catch (error) {
						console.warn('Failed to mark as welcomed:', error);
					}
				}

				handleInput() {
					// Clear existing timeout
					if (this.saveTimeout) {
						clearTimeout(this.saveTimeout);
					}

					// Show saving status immediately
					this.showStatus('Saving...', 'saving');

					// Set new timeout for saving
					this.saveTimeout = setTimeout(() => {
						this.saveContent();
					}, this.saveDelay);
				}

				saveContent() {
					try {
						const content = this.textarea.value;
						localStorage.setItem(this.storageKey, content);
						this.showStatus('Saved', 'saved');
						
						// Hide status after 2 seconds
						setTimeout(() => {
							this.hideStatus();
						}, 2000);
					} catch (error) {
						console.error('Failed to save content:', error);
						this.showStatus('Save failed', 'error');
					}
				}

				async copyToClipboard() {
					try {
						const content = this.textarea.value;
						if (!content.trim()) {
							return; // Don't copy empty content
						}

						await navigator.clipboard.writeText(content);
						this.copyModal.showModal();
					} catch (error) {
						console.error('Failed to copy to clipboard:', error);
						// Fallback for older browsers
						this.textarea.select();
						document.execCommand('copy');
						this.copyModal.showModal();
					}
				}
				showStatus(text, type) {
					this.saveStatus.textContent = text;
					this.saveStatus.className = `save-status visible ${type}`;
				}

				hideStatus() {
					this.saveStatus.classList.remove('visible');
				}
			}

			// Initialize the editor when DOM is loaded
			document.addEventListener('DOMContentLoaded', () => {
				new AutoSaveEditor();
			});

			// Handle focus for better mobile experience
			if ('ontouchstart' in window) {
				document.getElementById('textEditor').addEventListener('focus', function() {
					// Small delay to ensure keyboard is shown
					setTimeout(() => {
						this.scrollIntoView({ behavior: 'smooth', block: 'center' });
					}, 300);
				});
			}
		</script>
	</body>
</html>